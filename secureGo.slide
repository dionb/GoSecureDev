Secure Development in Go
A quick guide on how to build APIs securely with Go
5 Feb 2018

Dion Bramley
Senior Software Engineer, Spalk
dionbramley@gmail.com
github.com/dionb

* Why build go?

Designed to fix Google sized problems in software engineering:

- slow builds
- each programmer using a different subset of the language
- poor program understanding (code hard to read, poorly documented, and so on)
- duplication of effort
- cost of updates
- difficulty of writing automatic tools
- cross-language builds

: Docker
: Kubernetes
: InfluxDB
: Gogs

* What is Go?

- compiled
- statically typed
- designed for concurrency
- garbage-collected
- simple syntax
- no magic - every operation is O(1)
- consistent look

: runtime
: less verbose than java
: better concurrency than C++


* Hello World

.play helloWorld.go

: export using Case of first letter

* fizzbuzz

.play -edit fizzbuzz.go /START/,/STOP/

: := is called type inference

* Language features

* Deep pass by value

.play passByValue.go /START/,/STOP/
.play passByPointer.go /START/,/STOP/

: avoid accidentally modifying memory
: especially helpful in multithreading

* Multiple and named returns

.code namedReturn.go

: pre-initialises named output variables
: doesn't return a tuble like python
: enables next feature

* Exceptions are not exceptional

.code error.go

: are allowed to panic, but not a great idea
: no showing workings to attackers when they break things

* Defer example

.play defer1.go /START/,/STOP/

: alays run this function when returning from my current scope

* Defer use case

.code defer.go /START/,


* No generics - waaaaaat??

* Jon Skeet on generics:

Bad:

- Type information is lost at compile time, so not available at execution time
- Can't be used for value types 
- Syntax for calling generic methods sucks (IMO)
- Syntax for constraints can get confusing
- Wildcarding is generally confusing
- Various restrictions due to the above - casting etc

Good:

- Wildcarding allows covariance/contravariance to be specified at calling side
- It's better than nothing!

* Implicit interface satisfaction

.code interface.go /START1/,/STOP1/

* Interfaces part 2

.play interface.go /STOP1/,/STOP2/

* Easy, lightweight multithreading
 go list.Sort()  // run list.Sort concurrently; don't wait for it.

Distribute tasks to multiple threads:

 func Announce(messages []string, destination string) {

 	 for _,m := range messages {
     	 go func(k string) {

     		 buf := bytes.NewBufferString(k)
     		 resp, _ := http.Post(destination, "", &buf)

    	  }(m)  // Note the parentheses - must call the function.
  	}

 }

: function inherits scope of where it is defined
: explicitly pass parameters to inline functions

* Share memory by communicating

.play channel.go /START/,/^}/

: simplify implementation
: eliminate bugs from concurrently accessing data
: channel operations are blocking I/O calls

* Sync with select

.play select.go /START/,/STOP/

: randomly chooses an operatiton from the ones that are available
: used for implementing timeouts

: These all combine to make your complicated problems easy to solve with safe performant code.
: Can do concurrency functionally
: Fewer hard to find bugs

* Escape analysis

Anytime a value is shared outside the scope of a function’s stack frame, it will be placed (or allocated) on the heap. It’s the job of the escape analysis algorithms to find these situations and maintain a level of integrity in the program. The integrity is in making sure that access to any value is always accurate, consistent and efficient. - Ardan labs

: You don't usually choose whether you data is allocated on the heap or stack, the compiler chooses for you
: Don't cause memory leaks,
: Don't accidentally free memory you want to use elsewhere

* Struct annotation and JSON

.play -edit json.go /START/,/STOP/

: sensitive data exposure
: unsafe deserialisation
: good for marshalling between formats
: and secure code reuse

* Build your own API

* A simple GET

.code simpleGET.go

* DB READ

 db, err = sql.Open("mysql", "hello:world@tcp(127.0.0.1:3306)/gosecdev")

.code server/server.go /STARTselect/,/STOPselect/

.play -edit selectReq.go /START/,/STOP/

: sql inejection
: paramaterised queries

* INSERT & JSON

.code server/server.go /STARTinsert/,/STOPinsert/

.play -edit insertReq.go /START/,/STOP/

: sql injection
: omitted a method switch
: talk about dbr

* OS.Exec

.code server/server.go /STARTexec/,/STOPexec/

.play execReq.go /START/,/STOP/

: script injection

* Crypto/bcrypt

.play -edit encrypt.go  /START/,/STOP/
.play -edit hashCompare.go  /START/,/STOP/

: password storage - broken authentication

* Testing

.code demo_test.go /START/,/STOP/

: go test -v demo_test.go

* Tooling

- go get $url
- go fmt
- goimports
- go vet
- go test -race
- go generate
- present

: go vet will catch misuse of concurrency primitives and syntax issues in struct tags as well as other functional linting

* Why NOT Go?

- No implementations of insecure protocols
- It isn't something you already know
- Binaries, binaries and more binaries
- Can't distribute libraries securely - no DLLs
- Plugins?
- Using it is slow. I need to move fast a break things

: rounding
: GUI
: carrier api

* Let's make a pizza shop!

