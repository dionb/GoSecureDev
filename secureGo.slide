Secure Development in Go
A quick guide on how to build APIs securely with Go
5 Feb 2018

Dion Bramley
Senior Software Engineer, Spalk
dionbramley@gmail.com

* What is Go?

- compiled
- statically typed
- concurrent
- garbage-collected

Designed to fix Google sized scaling problems in software engineering:

- slow builds
- each programmer using a different subset of the language
- poor program understanding (code hard to read, poorly documented, and so on)
- duplication of effort
- cost of updates
- difficulty of writing automatic tools
- cross-language builds


* Hello World

.play helloWorld.go

* fizzbuzz

.play fizzbuzz.go /START/,/STOP/


* Language features

* Deep pass by value

.play passByValue.go /START/,/STOP/
.play passByPointer.go /START/,/STOP/

* Multiple and named returns

.code namedReturn.go

* Defer

.code defer.go /START/,

* Easy, lightweight multithreading
 go list.Sort()  // run list.Sort concurrently; don't wait for it.

Distribute tasks to multiple threads:

 func Announce(messages []string, destination string) {
 	for _,m := range messages {
     	go func(m string) {
     		buf := bytes.NewBufferString(m)
     		resp, _ := http.Post(destination, "", &buf)
    	}(m)  // Note the parentheses - must call the function.
  	}
 }
* Share memory by communicating

* Sync with select

.play select.go /START/,/STOP/

* Implicit interface satisfaction

* No generics - waaaaaat??

* Exceptions are not exceptional

.code error.go


* Build your own API

* A simple GET

* DB CRUD with JSON

* OS.Exec

* Crypto/bcrypt

* Testing

* Tooling

* Why NOT Go?

- No implementations of insecure protocols
- It isn't something you already know
- Binaries, binaries and more binaries
- Plugins?
- Using it is slow. I need to move fast a break things