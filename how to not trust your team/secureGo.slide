How To Not Trust Your Team
Without being a nihilist
12 Apr 2018

Dion Bramley
Senior Software Engineer, Trail
dionbramley@gmail.com

* First a caveat

You need to trust you team

Too obvious to be missed?

* Why give this talk?

People make mistakes
It's hard to hire only experts
You can't usually tell if someone is a malicious actor
Smaller blast radii are preferable

* Principle of least privilege

Every actor must be able to access only the information and resources that are necessary for its legitimate purpose

* IAM

Everyone should have their own account
Whitelist!
Don't reuse roles/permission sets 

Infrastructure access!

* Temporal IAM

Incident response teams

* Automated tooling

CI/CD
CVS - change tracking

* Restrictive frameworks

React-Redux

* Rigorous automated testing

Unit testing and TDD - only works for pure functions
Integration - Perfect code coverage? Yeah right.
Snapshot - Only change detection, no correctness - cheap
Fuzzing - Good at catching crashes and side effects (deepfreeze)

* Software design considerations

Functional programming
Language choice
Separate concerns in architecture
Generally aim for choices that promote stability, security, robustness

* Enforcement

Process - Peer reviews
Code inspection - OWASP vulnerability scanner
Reflection





